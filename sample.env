# Booleans should all be lowercase: true/false

# SERVER - node || apache(deprecated)
SERVER=node
# PORT
# In development mode only, PORT+1 will also be used for the main site
PORT=8888
# AUTH - off || none || local || csso
# off: No authentication. Users cannot sign up or log in. Tools that require log in will not work.
# none: No authentication. Users can still sign up and log in from within MMGIS
# local: Anyone without credentials is blocked. The Admin must log in, create accounts and pass out the credentials
#   (does not work in dev env/build first and npm run start:prod)
# csso: Use a Cloud Single Sign On service that's proxied in front of MMGIS   
AUTH=none
# NODE_ENV - development || production
NODE_ENV=development
# SECRET
SECRET=aSecretKey

#LOGGING
VERBOSE_LOGGING=false

# Sets the Content-Security-Policy: frame-ancestors header to allow the embedding in external sites. default null, ex: FRAME_ANCESTORS='["https://*.jpl.nasa.gov"]'
FRAME_ANCESTORS=
# Sets "SameSite=None; Secure" on the login cookie. Useful when using AUTH=local as an iframe within a cross-origin page.
THIRD_PARTY_COOKIES=false
# Sets the Content-Security-Policy: frame-src header to allow the embedding external sites with mmgis. default null, ex: FRAME_ANCESTORS='["https://*.jpl.nasa.gov"]'.
# Setting this will almost always have no effect
FRAME_SRC=

# Set MMGIS to be deployed under a subpath. For example if serving at the subpath 'https://{domain}/path/where/I/serve/mmgis' is desired, set `ROOT_PATH=/path/where/I/serve/mmgis`. If no subpath, leave blank.
ROOT_PATH=

# Overrides ROOT_PATH's use when the client connects via websocket. Websocket url: `${ws_protocol}://${window.location.host}${WEBSOCKET_ROOT_PATH || ROOT_PATH || ''}/`
WEBSOCKET_ROOT_PATH=

# Sets a clearance number for the website
CLEARANCE_NUMBER=

# If true, users that use the 'Copy Link' feature will receive a full-length deep link.
# Writing new short links will be disabled but expanding existing ones will still work. default false
DISABLE_LINK_SHORTENER=false

#DB
# If using docker, DB_HOST is the database container name
DB_HOST=localhost
# Postgres' default port is 5432
DB_PORT=5432
DB_NAME=name
DB_USER=user
DB_PASS=password
# Max number connections in the database's pool. CPUs * 4 is a good number. Default is 10
DB_POOL_MAX=
# How many milliseconds until a DB connection times out. Default is 30000 (30 sec)
DB_POOL_TIMEOUT=
# How many milliseconds for an incoming connection to wait for a DB connection before getting kicked away. Default is 10000 (10 sec)
DB_POOL_IDLE=

#CONFIG
# Disable the configure page
HIDE_CONFIG=false
# Force one mission only and this is its config
FORCE_CONFIG_PATH=''

# When using single sign on, users must belong to at least one of these groups to access MMGIS
CSSO_GROUPS=["A", "B"]
# When using single sign on, the user group with elevated "Lead" permissions
CSSO_LEAD_GROUP=A
# When not using csso, a string array of internal usernames with elevated "Lead" permissions
LEADS=["user1"]

# If true, enables the backend MMGIS websockets to tell clients to update layers
ENABLE_MMGIS_WEBSOCKETS=false
# If true, notifications are sent to /configure users whenever the configuration objects changes out from under them and puts (overridable) limits on saving.
ENABLE_CONFIG_WEBSOCKETS=false
# For use when ENABLE_CONFIG_WEBSOCKETS=true (if ENABLE_CONFIG_WEBSOCKETS=false, all saves will freely overwrite already). If true, gives /configure users the ability to override changes made to the configuration while they were working on it with their own.
ENABLE_CONFIG_OVERRIDE=false

# If the new MAIN_MISSION ENV is set to a valid mission, skip the landing page and go straight to that mission.
# Other missions will still be accessible by either forcing the landing page (clicking the top-left M logo) or by going to a link directly.
MAIN_MISSION=

# If true, MMGIS will not auto-login returning users. This can be useful when login is managed someplace else.
# The initial login process can be manually triggered with mmgisAPI.initialLogin()
SKIP_CLIENT_INITIAL_LOGIN=

# If true at build-time, JavaScript source maps will also be built 
GENERATE_SOURCEMAP=false

# If true, then at every other midnight, MMGIS will read /Missions/spice-kernels-conf.json and re/download all the specified kernels.
SPICE_SCHEDULED_KERNEL_DOWNLOAD=false
# If true, then also triggers the kernel download when MMGIS starts
SPICE_SCHEDULED_KERNEL_DOWNLOAD_ON_START=false
# A cron schedule expression for use in the node-schedule npm library. Defaults to "0 0 */2 * *" which is every other day.
SPICE_SCHEDULED_KERNEL_CRON_EXPR=

# When using composited time tiles, MMGIS queries the tileset's folder for existing time folders.
# It caches the results of the these folder listings every COMPOSITE_TILE_DIR_STORE_MAX_AGE_MS milliseconds
# defaults to requerying every 30 minutes. If 0, no caching. If null or NaN, uses default.
COMPOSITE_TILE_DIR_STORE_MAX_AGE_MS=